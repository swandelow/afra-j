#!/bin/bash

# Esta función tiene como fin procesar todos los archivos del directorio ACEPDIR.

# Función para obtener la fecha actual. 
# Deja el resultado en $fechaHoy para que sea utilizada despues. 
function obtenerFecha { 
	fechaHoy=`date +%Y%m%d` 
} 

# Recorro todos los archivos del directorio y me quedo con el minimo. 
function obtenerArchivoFechaMasAntigua {        
	cd $ACEPDIR 
	dir=$(dir) 
	obtenerFecha 
	MINIMO=$fechaHoy 
	for file in $dir; 
	do 
		fechaArchivo=$(echo "$file" | cut -d'_' -f2) 
		fechaArchivoSinExtension=$(echo "$fechaArchivo" | cut -d'.' -f1) 
		if [ $fechaArchivoSinExtension -le $MINIMO ]; then 
			MINIMO=$fechaArchivoSinExtension 
			nombreArchivoMinimo=$file	 
		fi 
	done; 
} 

# Se fija si el archivo esta en PROCDIR. 
# Si está, devuelve 0. 
# Si no está, devuelve 1. 
function verificarQueElArchivoHayaSidoProcesado { 
	cd "$PROCDIR/proc"
	dir=$(dir) 
	# Recorro todos los archivos procesados y me fijo si hay alguno con el mismo nombre. En ese caso muevo el archivo a RECHDIR. 
	for file in $dir; 
	do 
		if [ $file = $nombreArchivoMinimo ]; then 
			resultadoFuncionVerificarArchivoProcesado=0
			return 0 
		fi 
	done; 
	resultadoFuncionVerificarArchivoProcesado=1
	return 1 
} 

# Chequea que la estructura interna sea válida(que tenga 8 campos). 
# Devuelve 0, si es inválida. 
# Devuelve 1, si es válida. 
function verificarCantidadDeCampos { 
	while read line 
	do 
		cantidadPuntoYComa=$(grep -o ";" <<< "$line" |wc -l)	 
		if [ ! "$cantidadPuntoYComa" -eq 7 ]; then 
			resultadoVerificarCampos=0
			return 0 
		fi 
		resultadoVerificarCampos=1
		return 1 
	done < $ACEPDIR/$nombreArchivoMinimo 
} 

function obtenerCantidadArchivos { 
	cd $ACEPDIR 
	dir=$(dir) 
	for file in $dir; 
	do 
		let cantidadDeArchivosEnElDirectorio=cantidadDeArchivosEnElDirectorio+1 
	done;	 
} 

#se le pasa dos parametros. EL primero es la longitud del codigo de area, y el segundo es la longitud del numero de linea. Despues se mira el numero de resultado para ver si salio todo bien
function validarLongitudNumeroDeLinea (){
	if ( [[ $1 -eq 2 ]] && [[ ! $2 -eq 8 ]] ) || ( [[ $1 -eq 3 ]] && [[ ! $2 -eq 7 ]] ) || ( [[ $1 -eq 4 ]] && [[ ! $2 -eq 6 ]] ) ; then 
		resultadoValidacionLongitud=1	
		return 1
	fi
	resultadoValidacionLongitud=0
	return 0		
}
#grabo en RECHDIR/LLAMADAS el registro rechazado (en su respectivo archivo)
function rechazarRegistro(){
	linea="$nombreArchivoMinimo;$motivo;$1"
	cd "$RECHDIR/llamadas"
	echo "$linea" >> "$nombreArchivoCodigoCentral.rech"
}	

#el parametro que recibe es la linea que se quiere escribir en el archivo de llamada sospechosa
function grabarLlamadaSospechosa(){
	lineaAGrabar=$1
	nombreArchivoAGenerarSospechoso=$oficina'_'$anioLlamadaMesLlamada
	cd $PROCDIR
	echo "$lineaAGrabar" >> "$nombreArchivoAGenerarSospechoso"
	let contadorDeLlamadasSospechosas=contadorDeLlamadasSospechosas+1
}

#determino el tipo de llamada. HAY QUE PASARLE EL REGISTRO QUE SE ESTA PROCESANDO COMO PARAMETRO!
function determinarTipoDeLlamada(){ 
	codPais=$(echo "$1" | cut -d';' -f6) 
	numLineaB=$(echo "$1" | cut -d';' -f8)
	if [ ! "$codPais" == "" ]; then #me fijo que se haya ingresado un codigo de pais (no es obligatorio)
		codPaisExt="$codPais;" 
		existecodPais=`grep "$codPaisExt" -c "$MAEDIR/CdP.mae"` #me fijo si esta en el maestro de 																paises
		if [[ "$?" -eq 1 ]] || [[ "$numLineaB" == "" ]] ; then #la segunda condicion es porque dice que tiene que haber un numero ela 												consigna pero es medio al pedo
			motivo="codigo de pais inexistente o no hay numero de linea"
			tipoLLamada="error"
			resultadoDeterminarTipoDeLlamada=1
			return 1
		fi
		tipoLLamada="DDI" #guardo tipo de llamada
		resultadoDeterminarTipoDeLlamada=0
		return 0
		
	else 
		codAreaA=$(echo "$1" | cut -d';' -f4)
		codAreaB=$(echo "$1" | cut -d';' -f7)
		existecodAreaB=`grep "$codAreaB" -c -w "$MAEDIR/CdA.mae"` #me fijo si esta en el maestro de área	
		if [ "$?" -eq 1 ] ; then #No encontro el codigo de area.
			motivo="area erronea"
			resultadoDeterminarTipoDeLlamada=1
			return 1
		else
			longCodAreaB=${#codAreaB} 
			longNumLineaB=${#numLineaB}
			validarLongitudNumeroDeLinea "$longCodAreaB" "$longNumLineaB" #llamo a la funcion que valida el 													numero de linea contra el codigo de area
			if [[ $resultadoValidacionLongitud -eq 1 ]]; then
				motivo="la suma de las longitudes del código de área y del número de linea B no es la esperada"
				resultadoDeterminarTipoDeLlamada=1
				return 1 #esto lo chequeo afuera pero tengo que salir de aca para no grabar el tipo de llamada
			fi
			if [ "$codAreaA" -eq "$codAreaB" ]; then
				tipoLLamada="LOC"
				resultadoDeterminarTipoDeLlamada=0	
				return 0
			else
				tipoLLamada="DDN"
				resultadoDeterminarTipoDeLlamada=0
				return 0
			fi
		fi
		
	fi
}

#Se fija si hay alguna llamada sospechosa y de ser así, la graba. Además setea los contadores.
function verificarSiHayAlgunUmbralActivo {
	regristroDelArchivoDeLLamadas=$line 
	listaDeRegistrosDeNumeroOrigen=`grep $numLineaA  "$MAEDIR/umbral.tab"`	

	for registro in $listaDeRegistrosDeNumeroOrigen
	do 
		estadoUmbral=$(echo "$registro" | cut -d';' -f7) #Obtengo el estado del umbral.
		if [ $estadoUmbral == "Activo" ]; then
			let contadorDeLlamadasConUmbral=contadorDeLlamadasConUmbral+1
			tope=$(echo "$registro" | cut -d';' -f6) 
			codigoArea=$(echo "$registro" | cut -d';' -f2) 
			numeroDeLineaOrigen=$(echo "$registro" | cut -d';' -f3) 
			tipoDeLlamadaUmbral=$(echo "$registro" | cut -d';' -f4) 
			codigoDestino=$(echo "$registro" | cut -d';' -f5)
			if ( [[ $tope -lt $tiempoDeConversacion ]] && 
			   [ $codigoArea == $codArea ] &&
			   [ $numeroDeLineaOrigen == $numLineaA ] ); then
			   if [[ $tipoDeLlamadaUmbral == $tipoLLamada ]]; then
					if ( [[ $tipoDeLlamadaUmbral == "DDI" ]] && ( [[ $codigoDestino == $codPais ]] || [[ $codigoDestino == "" ]] ) ) ||
				   	   ( ( [[ $tipoDeLlamadaUmbral == "DDN" ]] || [[ $tipoDeLlamadaUmbral == "LOC" ]] ) &&			 					     
				  	   ( [[ $codigoDestino == $codAreaB ]] || [[ $codigoDestino == "" ]] ) ) ; then
						idUmbral=$(echo "$registro" | cut -d';' -f1) 
						idAgente=$(echo "$regristroDelArchivoDeLLamadas" | cut -d';' -f1) 
						registroDelAgente=`grep "$idAgente" "$MAEDIR/agentes.mae"`
						oficina=$(echo "$registroDelAgente" | cut -d';' -f4)
						fechaHoraLLamada=$(echo "$regristroDelArchivoDeLLamadas" | cut -d';' -f2)
						fechaSola=$(echo "$fechaHoraLLamada" | cut -d' ' -f1)
						horaSola=$(echo "$fechaHoraLLamada" | cut -d' ' -f2)
						fechaDeLaLlamada=$(echo "$fechaHoraLLamada" | cut -d' ' -f1)
  						anioDeLaLlamada=$(echo "$fechaDeLaLlamada" | cut -d'/' -f3)
  						mesDeLaLlamada=$(echo "$fechaDeLaLlamada" | cut -d'/' -f2)
						anioLlamadaMesLlamada=$anioDeLaLlamada$mesDeLaLlamada
						idCentral=$(echo "$nombreArchivoMinimo" | cut -d'_' -f1)
						codAreaDeLaLlamada=$(echo "$line" | cut -d';' -f4)
						codPaisNumeroB=$(echo "$line" | cut -d';' -f6)
						codAreaNumeroB=$(echo "$line" | cut -d';' -f7)
						numeroLineaB=$(echo "$line" | cut -d';' -f8)
						fechaFormatoArchivoInput=$(echo "$nombreArchivoMinimoSinCsv" | cut -d'_' -f2)
						# separamos la fecha de la hora con un guion porque si queremos separar con espacio 
						# concatena todo hasta el espacio, y todo lo que venia despues lo pierde.
						primerRenglon="$idCentral;$idAgente;$idUmbral;$tipoDeLlamadaUmbral;$fechaSola-$horaSola"
						segundoRenglon=";$tiempoDeConversacion;$codAreaDeLaLlamada;$numLineaA"
						tercerRengln=";$codPaisNumeroB;$codAreaNumeroB;$numeroLineaB;$fechaFormatoArchivoInput"	
						registroAEscribir="$primerRenglon$segundoRenglon$tercerRengln"
						grabarLlamadaSospechosa "$registroAEscribir"
						return 1
					else
						let contadorDeLlamadasNoSospechosas=contadorDeLlamadasNoSospechosas+1
						return 1
					fi
				else
					let contadorDeLlamadasNoSospechosas=contadorDeLlamadasNoSospechosas+1
					return 1				
				fi				
			else
				let contadorDeLlamadasNoSospechosas=contadorDeLlamadasNoSospechosas+1
				return 1
			fi
		fi
	done
	let contadorDeLlamadasSinUmbral=contadorDeLlamadasSinUmbral+1
	return 0					
}

function validarRegistro { #funcion que valida registro por registro que se verifiquen las especificaciones
	OLDIFS=$IFS
	IFS=$'\n'	
	for line in $(cat "$ACEPDIR/$nombreArchivoMinimo")  
	do	 
		let contadorDeLlamadas=contadorDeLlamadas+1
		agente=$(echo "$line" | cut -d';' -f1) #chequeo que el nombre de agente este en el maestro
		agente="$agente;"  #agrego coma porque si pongo MARIO matchea con MARIORUIZ y esta mal
		existeAgente=`grep "$agente" -c "$MAEDIR/agentes.mae"` #chequeo que exista
		if [ "$?" -eq 1 ]; then
			motivo="agente erroneo"
			echo $motivo
			let contadorDeLlamadasRechazadas=contadorDeLlamadasRechazadas+1
			rechazarRegistro "$line" #lo escribo en rechazados
			continue
		fi
		#chequeo que el codigo de area A sea correcto
		codArea=$(echo "$line" | cut -d';' -f4)
		existeArea=`grep "$codArea" -w -c "$MAEDIR/CdA.mae"`
	
		if [ "$?" -eq 1 ]; then
			motivo="area erronea"
			let contadorDeLlamadasRechazadas=contadorDeLlamadasRechazadas+1
			rechazarRegistro "$line"
			continue
		fi
		#me fijo que la longitud de codigo de area y de la linea de telefono sean validos
		longCodAreaA=${#codArea} #esta funcion da la longitud
		numLineaA=$(echo "$line" | cut -d';' -f5)
		longNumLineaA=${#numLineaA}
		validarLongitudNumeroDeLinea "$longCodAreaA" "$longNumLineaA"
		if [[ $resultadoValidacionLongitud -eq 1 ]]; then
			motivo="la suma de las longitudes del código de área y del número de linea A no es la esperada"
			let contadorDeLlamadasRechazadas=contadorDeLlamadasRechazadas+1
			rechazarRegistro "$line"
			continue
		fi
		determinarTipoDeLlamada "$line" #devuelve el nombre del tipo de llamada en una variable, esto 												lo vamos a usar para grabar sospechosas	 
		if [[ $resultadoDeterminarTipoDeLlamada -eq 1 ]]; then #Quiere decir que hubo algun error al determinar el tipo de llamada
			let contadorDeLlamadasRechazadas=contadorDeLlamadasRechazadas+1
			rechazarRegistro "$line"
			continue
		fi
		tiempoDeConversacion=$(echo "$line" | cut -d';' -f3)
		if [[ $tiempoDeConversacion -lt 0 ]]; then
			motivo="tiempo de conversacion menor a cero"
			let contadorDeLlamadasRechazadas=contadorDeLlamadasRechazadas+1
			rechazarRegistro "$line"
			continue
		fi

		# Si llegó hasta acá, el registro es válido.
	
		#Chequeo si existe algún umbral activo para el número de linea A (origen).
		existeUmbral=`grep "$numLineaA" -c "$MAEDIR/umbral.tab"` #chequeo que exista
		if [ "$?" -eq 1 ]; then
			motivo="no hay ningún umbral activo para el número de origen"
			let contadorDeLlamadasSinUmbral=contadorDeLlamadasSinUmbral+1
			continue
		fi

		verificarSiHayAlgunUmbralActivo
	done
	IFS=$OLDIFS
}

cantidadArchivosRechazados=0
cantidadArchivosProcesados=0
cantidadDeArchivosEnElDirectorio=0 
obtenerCantidadArchivos 
cd $BINDIR
bash ./GraLog "AFUMB" "Inicio de AFUMB" "INFO"  
bash ./GraLog "AFUMB" "Cantidad de archivos a procesar:$cantidadDeArchivosEnElDirectorio" "INFO"  

#Procesa todos los archivos del directorio.
for (( i=0; i < $cantidadDeArchivosEnElDirectorio; i++ )); 
do 
	contadorDeLlamadas=0
	contadorDeLlamadasRechazadas=0
	contadorDeLlamadasConUmbral=0
	contadorDeLlamadasSinUmbral=0
	contadorDeLlamadasSospechosas=0
	contadorDeLlamadasNoSospechosas=0	
	obtenerArchivoFechaMasAntigua 
	verificarQueElArchivoHayaSidoProcesado
	if [ $resultadoFuncionVerificarArchivoProcesado == 0 ]; then 
		cd $BINDIR
		bash ./GraLog "AFUMB" "Se rechaza el archivo por estar DUPLICADO" "ERROR" 
		let cantidadArchivosRechazados=cantidadArchivosRechazados+1
		cd $BINDIR	 
		bash ./MoverA "$ACEPDIR/$nombreArchivoMinimo" "$RECHDIR" 
	else 
		verificarCantidadDeCampos
		if [ $resultadoVerificarCampos == 0 ]; then 
			cd $BINDIR
			bash ./GraLog "AFUMB" "Se rechaza el archivo porque su estructura no se corresponde con el formato esperado" "ERROR"
 			let cantidadArchivosRechazados=cantidadArchivosRechazados+1
			cd $BINDIR	 
			bash ./MoverA "$ACEPDIR/$nombreArchivoMinimo" "$RECHDIR" 
		else 
			cd $BINDIR
			bash ./GraLog "AFUMB" "Archivo a procesar:$nombreArchivoMinimo" "INFO" 			
			cd "$RECHDIR/llamadas"

			let cantidadArchivosProcesados=cantidadArchivosProcesados+1
			nombreArchivoMinimoSinCsv=$(echo "$nombreArchivoMinimo" | cut -d'.' -f1) #Le saco el .csv.
			nombreArchivoCodigoCentral=$(echo "$nombreArchivoMinimo" | cut -d'_' -f1) #Me quedo con el código de la central.
			#> "$nombreArchivoMinimoSinCsv.rech" 
			validarRegistro #valido todo los registros del archivo
			cd $BINDIR 
			bash ./MoverA "$ACEPDIR/$nombreArchivoMinimo" "$PROCDIR/proc" 
		fi 
	fi 
	cd $BINDIR
	bash ./GraLog "AFUMB" "Cantidad de llamadas:$contadorDeLlamadas" "INFO" 	
	bash ./GraLog "AFUMB" "Cantidad de llamadas rechazadas:$contadorDeLlamadasRechazadas" "INFO" 	
	bash ./GraLog "AFUMB" "Cantidad de llamadas con umbral:$contadorDeLlamadasConUmbral" "INFO" 	
	bash ./GraLog "AFUMB" "Cantidad de llamadas sin umbral:$contadorDeLlamadasSinUmbral" "INFO" 	
	bash ./GraLog "AFUMB" "Cantidad de llamadas sospechosas:$contadorDeLlamadasSospechosas" "INFO" 	
	bash ./GraLog "AFUMB" "Cantidad de llamadas no sospechosas:$contadorDeLlamadasNoSospechosas" "INFO"	
	echo " "
done 
			cd $BINDIR
			bash ./GraLog "AFUMB" "Cantidad de archivos procesados:$cantidadArchivosProcesados" "INFO" 	
			bash ./GraLog "AFUMB" "Cantidad de archivos rechazados:$cantidadArchivosRechazados" "INFO" 	
			bash ./GraLog "AFUMB" "Fin de AFUMB" "INFO" 	
