#!/bin/bash

MSG_INVALID_DIR_NAME="El nombre del directorio sólo puede contener letras y debe tener de 1 a 15 caracteres. Intente nuevamente:"
MSG_INVALID_INTEGER="Tiene que ingresar un número entero. Intente nuevamente:"
DIR_NAME_REGEX=^[a-zA-Z]{1,15}\(/[a-zA-Z]{1,15}\){0,}$
INTEGER_REGEX=^[0-9]+$
GRUPO=grupo06
CONFDIR="$GRUPO"/conf
BINDIR="$GRUPO"/bin
MAEDIR="$GRUPO"/mae
NOVEDIR="$GRUPO"/novedades
ACEPDIR="$GRUPO"/aceptadas
PROCDIR="$GRUPO"/sospechosas
REPODIR="$GRUPO"/reportes
LOGDIR="$GRUPO"/log
RECHDIR="$GRUPO"/rechazadas
DATASIZE=100
LOGEXT=lg
LOGSIZE=400

#Chequea que Perl esté instalado
function check_perl {
	perl_version=$(dpkg-query -W perl | sed 's-\(perl\)\([[:blank:]]\)\(.*\)-\3-g')
	if [ ! -z $perl_version ]; then
		#GRABAR EN EL LOG
		echo Perl version: "$perl_version"
	else
		#Perl no instalado
		echo Para ejecutar el sistema AFRA-J es necesario contar con Perl 5 o superior.
		echo Efectúe su instalación e inténtelo nuevamente.
		echo Proceso de Instalación Cancelado
		exit
	fi

}

#Pide al usuario que acepte los términos y condiciones
function terms_and_conditions {
	echo
	echo "***************************************************"
	echo \*  Proceso de Instalación de \"AFRA-J\"  \*
	echo \*  Tema J Copyright © Grupo xx - Segundo Cuatrimestre 2015  \*
	echo "***************************************************"
	echo A T E N C I O N: Al instalar UD. expresa aceptar los términos y condiciones del \"ACUERDO DE LICENCIA DE SOFTWARE\" incluido en este paquete.
	echo Acepta\? Si – No
	read terms_choice

	while [ "$terms_choice" != Si ] && [ "$terms_choice" != No ];
	do
		echo Debe ingresar Si o No:
		read terms_choice
	done
	if [ "$terms_choice" == No ]; then
		echo Instalación cancelada.
		exit
	fi
}

#Ingreso de nombre de directorio de ejecutables
function choose_bin_dir {
	echo Defina el directorio de instalación de los ejecutables \("$BINDIR"\):

	read bin_dir
	if [ ! -z "$bin_dir" ]; then
		while ! [[ $bin_dir =~ $DIR_NAME_REGEX ]];
		do
			echo "$MSG_INVALID_DIR_NAME"
			read bin_dir
			if [ -z "$bin_dir" ]; then
				echo El directorio de ejecutables será "$BINDIR"
				echo
				return
			fi
		done
		BINDIR="$GRUPO"/"$bin_dir"
	fi
	
	echo El directorio de ejecutables será "$BINDIR"
	echo
}

#Ingreso de nombre de directorio de maestros y tablas
function choose_mae_dir {
	echo Defina el directorio para maestros y tablas \("$MAEDIR"\):

	read mae_dir
	if [ ! -z "$mae_dir" ]; then
		while ! [[ $mae_dir =~ $DIR_NAME_REGEX ]];
		do
			echo "$MSG_INVALID_DIR_NAME"
			read mae_dir
			if [ -z "$mae_dir" ]; then
				echo El directorio para maestros y tablas será "$MAEDIR"
				echo
				return
			fi
		done
		MAEDIR="$GRUPO"/"$mae_dir"
	fi

	echo El directorio para maestros y tablas será "$MAEDIR"
	echo
}

#Ingreso de nombre de directorio de recepción de archivos de llamadas
function choose_nove_dir {
	echo Defina el directorio de recepción de archivos de llamadas \("$NOVEDIR"\):
	read nove_dir
	if [ ! -z "$nove_dir" ]; then
		while ! [[ $nove_dir =~ $DIR_NAME_REGEX ]];
		do
			echo "$MSG_INVALID_DIR_NAME"
			read nove_dir
			if [ -z "$nove_dir" ]; then
				echo El directorio de recepción de archivos de llamadas será "$NOVEDIR"	
				echo
				return
			fi
		done
		NOVEDIR="$GRUPO"/"$nove_dir"
	fi

	echo El directorio de recepción de archivos de llamadas será "$NOVEDIR"	
	echo
}

#Ingreso de espacio mínimo libre para la recepción de archivos de llamadas
function choose_nove_dir_space {
	espacio_disponible=$(df -h -B M --output='avail' grupo06 | tail -1 | sed 's-\([0-9]*\)\(M\)-\1-g')

	echo Defina espacio mínimo libre para la recepción de archivos de llamadas en Mbytes \("$DATASIZE"\):
	read data_size
	if [ ! -z "$data_size" ]; then
		while [[ ! $data_size =~ $INTEGER_REGEX ]];
		do
			echo "$MSG_INVALID_INTEGER"
			read data_size
			if [ -z "$data_size" ]; then
				echo El espacio mínimo libre para la recepción de archivos será "$DATASIZE" Mb
				echo
				return
			fi
		done
	else
		echo El espacio mínimo libre para la recepción de archivos será "$DATASIZE" Mb
		echo
		return
	fi

	while (( espacio_disponible < data_size ));
	do
		echo Insuficiente espacio en disco.
		echo Espacio disponible: "$espacio_disponible" Mb.
		echo Espacio requerido "$data_size" Mb.
		echo Inténtelo nuevamente:

		read data_size
		if [ ! -z "$data_size" ]; then
			while [[ ! $data_size =~ $INTEGER_REGEX ]];
			do
				echo "$MSG_INVALID_INTEGER"
				read data_size
				if [ -z "$data_size" ]; then
					echo El espacio mínimo libre para la recepción de archivos será "$DATASIZE" Mb
					echo
					return
				fi
			done
		else
			echo El espacio mínimo libre para la recepción de archivos será "$DATASIZE" Mb
			echo
			return
		fi
	done

	DATASIZE="$data_size"
	echo El espacio mínimo libre para la recepción de archivos será "$DATASIZE" Mb
	echo
}

#Ingreso de nombre de directorio de grabación de los archivos de llamadas aceptadas
function choose_acep_dir {
	echo Defina el directorio de grabación de los archivos de llamadas aceptadas \("$ACEPDIR"\):
	read acep_dir
	if [ ! -z "$acep_dir" ]; then
		while ! [[ $acep_dir =~ $DIR_NAME_REGEX ]];
		do
			echo "$MSG_INVALID_DIR_NAME"
			read acep_dir
			if [ -z "$acep_dir" ]; then
				echo El directorio de grabación de los archivos de llamadas aceptadas será "$ACEPDIR"
				echo
				return
			fi
		done
		ACEPDIR="$GRUPO"/"$acep_dir"
	fi

	echo El directorio de grabación de los archivos de llamadas aceptadas será "$ACEPDIR"
	echo
}

#Ingreso de nombre de directorio de grabación de los registros de llamadas sospechosas
function choose_proc_dir {
	echo Defina el directorio de grabación de los registros de llamadas sospechosas \("$PROCDIR"\):
	read proc_dir
	if [ ! -z "$proc_dir" ]; then
		while ! [[ $proc_dir =~ $DIR_NAME_REGEX ]];
		do
			echo "$MSG_INVALID_DIR_NAME"
			read proc_dir
			if [ -z "$proc_dir" ]; then
				echo El directorio de grabación de los registros de llamadas sospechosas será "$PROCDIR"
				echo
				return
			fi
		done
		PROCDIR="$GRUPO"/"$proc_dir"
	fi

	echo El directorio de grabación de los registros de llamadas sospechosas será "$PROCDIR"
	echo	
}

#Ingreso de nombre de directorio de grabación de los reportes
function choose_repo_dir {
	echo Defina el directorio de grabación de los reportes \("$REPODIR"\):
	read repo_dir
	if [ ! -z "$repo_dir" ]; then
		while ! [[ $repo_dir =~ $DIR_NAME_REGEX ]];
		do
			echo "$MSG_INVALID_DIR_NAME"
			read repo_dir
			if [ -z "$repo_dir" ]; then
				echo El directorio de grabación de los reportes será "$REPODIR"
				echo
				return
			fi
		done
		REPODIR="$GRUPO"/"$repo_dir"
	fi

	echo El directorio de grabación de los reportes será "$REPODIR"
	echo
}

#Ingreso de nombre de directorio para los archivos de log
function choose_log_dir {
	echo Defina el directorio para los archivos de log \("$LOGDIR"\):
	read log_dir
	if [ ! -z "$log_dir" ]; then
		while ! [[ $log_dir =~ $DIR_NAME_REGEX ]];
		do
			echo "$MSG_INVALID_DIR_NAME"
			read log_dir
			if [ -z "$log_dir" ]; then
				echo El directorio para los archivos de log será "$LOGDIR"
				echo
				return
			fi
		done
		LOGDIR="$GRUPO"/"$log_dir"
	fi

	echo El directorio para los archivos de log será "$LOGDIR"
	echo
}

#Ingreso de nombre de extensión de archivos de log
function choose_log_extension_name {
	echo Defina el nombre para la extensión de los archivos de log \("$LOGEXT"\):
	read log_ext
	if [ -z "$log_ext" ]; then
		echo El nombre para la extensión de los archivos de log será "$LOGEXT"
		echo
		return
	fi

	while ! [[ $log_ext =~ ^[a-zA-Z]{2,5}$ ]];
	do
		echo La extensión debe estar compuesta solamente por letras y debe tener de 2 a 5 caracteres.
		echo Defina el nombre para la extensión de los archivos de log \("$LOGEXT"\):
		read log_ext
		if [ -z "$log_ext" ]; then
			echo El nombre para la extensión de los archivos de log será "$LOGEXT"
			echo
			return
		fi
	done

	LOGEXT="$log_ext"
	echo El nombre para la extensión de los archivos de log será "$LOGEXT"
	echo
}

#Ingreso de tamaño máximo para archivos de log
function choose_log_file_max_size {
	echo Defina el tamaño máximo para cada archivo de log en Kbytes \("$LOGSIZE"\):
	read log_size
	if [ -z "$log_size" ]; then
		echo El tamaño máximo para cada archivo de log será "$LOGSIZE" Kb
		echo
		return
	fi

	while [[ ! $log_size =~ $INTEGER_REGEX ]];
	do
		echo "$MSG_INVALID_INTEGER"
		read log_size
		if [ -z "$log_size" ]; then
			echo El tamaño máximo para cada archivo de log será "$LOGSIZE" Kb
			echo
		return
	fi
	done

	LOGSIZE="$log_size"
	echo El tamaño máximo para cada archivo de log será "$LOGSIZE" Kb
	echo
}

#Ingreso de nombre de directorio de grabación de archivos rechazados
function choose_rech_dir {
	echo Defina el directorio de grabación de archivos rechazados \("$RECHDIR"\):
	read rech_dir
	if [ ! -z "$rech_dir" ]; then
		while ! [[ $rech_dir =~ $DIR_NAME_REGEX ]];
		do
			echo "$MSG_INVALID_DIR_NAME"
			read rech_dir
			if [ -z "$rech_dir" ]; then
				echo El directorio de grabación de archivos rechazados será "$RECHDIR"
				echo
				return
			fi
		done
		RECHDIR="$GRUPO"/"$rech_dir"
	fi

	echo El directorio de grabación de archivos rechazados será "$RECHDIR"
	echo
}

function choose_vars_values {
	choose_bin_dir
	choose_mae_dir
	choose_nove_dir
	choose_nove_dir_space
	choose_acep_dir
	choose_proc_dir
	choose_repo_dir
	choose_log_extension_name
	choose_log_file_max_size
	choose_rech_dir
}

#Muestra el nombre de las variables de configuración
function show_vars_values {
	echo Directorio de Ejecutables: "$BINDIR" 
	echo Directorio de Maestros y Tablas: "$MAEDIR"
	echo Directorio de recepción de archivos y llamadas: "$NOVEDIR"
	echo Espacio mínimo libre para arribos: "$DATASIZE" Mb
	echo Directorio de Archivos de llamadas Aceptados: "$ACEPDIR"
	echo Directorio de Archivos de llamadas Sospechosas: "$PROCDIR"
	echo Directorio de Archivos de Reportes de llamadas: "$REPODIR"
	echo Directorio de Archivos de Log: "$LOGDIR"
	echo Extensión para los archivos de log: "$LOGEXT"
	echo Tamaño máximo para los archivos de log: "$LOGSIZE" Kb
	echo Directorio de Archivos Rechazados: "$RECHDIR"
}

function continue_install {
	show_vars_values
	echo Estado de la instalación: LISTA
	#Continuar instalación?
	echo Desea continuar con la instalación\? \(Si – No\)
	read continue_choice
	while [ "$continue_choice" != Si ] && [ "$continue_choice" != No ];
	do
		echo Debe ingresar Si o No:
		read continue_choice
	done
	if [ "$continue_choice" == Si ]; then
		return
	fi

	while [ "$continue_choice" == No ]; 
	do
		choose_vars_values
		show_vars_values
		echo Estado de la instalación: LISTA
		#Continuar instalación?
		echo Desea continuar con la instalación\? \(Si – No\)
		read continue_choice
		while [ "$continue_choice" != Si ] && [ "$continue_choice" != No ];
		do
			echo Debe ingresar Si o No:
			read continue_choice
		done
		if [ "$continue_choice" == Si ]; then
			return
		fi
	done	
}

function confirm_install {
	echo Iniciando Instalación. Esta Ud. seguro\? \(Si - No\)
	read install_choice
	while [ "$install_choice" != Si ] && [ "$install_choice" != No ];
	do
		echo Debe ingresar Si o No:
		read install_choice
	done
	if [ "$continue_choice" == No ]; then
		echo Instalación cancelada.
		exit
	fi	
}

function create_dirs {
	mkdir -p "$BINDIR"
	mkdir -p "$MAEDIR"
	mkdir -p "$NOVEDIR"
	mkdir -p "$ACEPDIR"
	mkdir -p "$PROCDIR"
	mkdir -p "$REPODIR"
	mkdir -p "$LOGDIR"
	mkdir -p "$RECHDIR"
	echo
}

function copy_binaries {
	echo
	#MOVER EJECUTABLES Y FUNCIONES A BINDIR
}

function copy_tables {
	cp ../../archivos/CdP.csv "$MAEDIR"/CdP.mae	
	cp ../../archivos/CdA.csv "$MAEDIR"/CdA.mae	
	cp ../../archivos/centrales.csv "$MAEDIR"/CdC.mae	
	cp ../../archivos/agentes.csv "$MAEDIR"/agentes.mae
	cp ../../archivos/umbrales.csv "$MAEDIR"/umbral.tab
	touch "$MAEDIR"/tllama.tab
	> "$MAEDIR"/tllama.tab
	#Doy permisos a todos a todo el directorio
	chmod -R +r+w "$MAEDIR"
	echo DISCADO DIRECTO INTERNACIONAL\;DDI >> "$MAEDIR"/tllama.tab
	echo DISCADO DIRECTO NACIONAL\;DDN >> "$MAEDIR"/tllama.tab
	echo LOCAL\;LOC >> "$MAEDIR"/tllama.tab
}

function update_config_file {
	echo Actualizando la configuración del sistema
	touch "$CONFDIR"/AFINSTAL.cnfg
	#De esta manera borro lo que haya:
	> "$CONFDIR"/AFINSTAL.cnfg
	#Doy permisos a todos a todo el directorio de configuración
	chmod -R +r+w "$CONFDIR"
	#Copio los registros al archivo de configuración
	echo GRUPO="$GRUPO"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo CONFDIR="$CONFDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo BINDIR="$BINDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo MAEDIR="$MAEDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo NOVEDIR="$NOVEDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo ACEPDIR="$ACEPDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo PROCDIR="$PROCDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo REPODIR="$REPODIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo LOGDIR="$LOGDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo RECHDIR="$RECHDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo DATASIZE="$DATASIZE"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo LOGEXT="$LOGEXT"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo LOGSIZE="$LOGSIZE"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
}

function do_install {
	echo Creando Estructuras de directorio. . . .
	echo "$BINDIR"
	echo "$MAEDIR"
	echo "$NOVEDIR"
	echo "$ACEPDIR"
	echo "$PROCDIR"
	echo "$REPODIR"
	echo "$LOGDIR"
	echo "$RECHDIR"
	create_dirs
	echo Instalando Programas y Funciones
	copy_binaries
	echo Instalando Archivos Maestros y Tablas
	copy_tables
	update_config_file
	echo Instalación CONCLUIDA.	
}

#Se encarga de completar la instalacion de ser necesario
function complete_install {
	if [ ! -f "$CONFDIR"/AFINSTAL.cnfg ]; then
    	#AFRAJ NO esta instalado
    	return
	fi

	declare -a missing_dirs
	declare -a missing_files
	#mae_filenames=(archivo_falso_1 archivo_falso_2 agentes.csv)
	mae_filenames=(CdP.mae CdA.mae CdC.mae agentes.mae umbral.tab tllama.tab)
	bin_filenames=()
	
	index_dirs=0
	index_files=0

	#CONFDIR
	conf_path=$(grep CONFDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$conf_path" ]; then
		missing_dirs[index_dirs]="$conf_path"
		((index_dirs++))
	fi

	#MAEDIR
	mae_path=$(grep MAEDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$mae_path" ]; then
		missing_dirs[index_dirs]="$mae_path"
		((index_dirs++))
	fi
	for mae_file in "${mae_filenames[@]}"
	do
		if [ ! -f "$mae_path"/"$mae_file" ]; then
			missing_files[index_files]="$mae_path"/"$mae_file"
			((index_files++))
		fi
	done

	#BINDIR
	bin_path=$(grep BINDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$bin_path" ]; then
		missing_dirs[index_dirs]="$bin_path"
		((index_dirs++))
	fi
	for bin_file in "${bin_filenames[@]}"
	do
		if [ ! -f "$bin_path"/"$bin_file" ]; then
			missing_files[index_files]="$bin_path"/"$bin_file"
			((index_files++))
		fi
	done

	#NOVEDIR
	nove_path=$(grep NOVEDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$nove_path" ]; then
		missing_dirs[index_dirs]="$nove_path"
		((index_dirs++))
	fi

	#ACEPDIR
	acep_path=$(grep ACEPDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$acep_path" ]; then
		missing_dirs[index_dirs]="$acep_path"
		((index_dirs++))
	fi

	#PROCDIR
	proc_path=$(grep PROCDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$proc_path" ]; then
		missing_dirs[index_dirs]="$proc_path"
		((index_dirs++))
	fi

	#REPODIR
	repo_path=$(grep REPODIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$repo_path" ]; then
		missing_dirs[index_dirs]="$repo_path"
		((index_dirs++))
	fi

	#LOGDIR
	log_path=$(grep LOGDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$log_path" ]; then
		missing_dirs[index_dirs]="$log_path"
		((index_dirs++))
	fi

	#RECHDIR
	rech_path=$(grep RECHDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$rech_path" ]; then
		missing_dirs[index_dirs]="$rech_path"
		((index_dirs++))
	fi

	#Esto tambien hay que loguearlo:
	echo Directorio de configuración: "$conf_path"
	echo $(ls "$conf_path")
	echo Directorio de ejecutables: "$bin_path"
	echo $(ls "$bin_path")
	echo Directorio de maestros y tablas: "$mae_path"
	echo $(ls "$mae_path")
	echo Directorio de recepción de archivos de llamadas: "$nove_path"
	echo Directorio de archivos de llamadas aceptadas: "$acep_path"
	echo Directorio de archivos de llamadas sospechosas: "$proc_path"
	echo Directorio de archivos de reportes de llamadas: "$repo_path"
	echo Directorio de archivos de log: "$log_path"
	echo Directorio de archivos rechazados: "$rech_path"

	if [ ${#missing_dirs[@]} == 0 ] && [ ${#missing_files[@]} == 0 ]; then
		echo Estado de la instalación: COMPLETA
		echo Proceso de Instalación Finalizado
		exit
	fi

	echo Directorios faltantes:
	echo "${missing_dirs[*]}"
	echo Archivos faltantes:
	echo "${missing_files[*]}"

	echo Desea completar la instalación\? \(Si – No\)
	read complete_choice
	while [ "$complete_choice" != Si ] && [ "$complete_choice" != No ];
	do
		echo Debe ingresar Si o No:
		read complete_choice
	done
	if [ "$complete_choice" == No ]; then
		echo Instalación cancelada.
		exit
	fi

	#Instalo de nuevo
	BINDIR=$bin_path
	MAEDIR=$mae_path
	NOVEDIR=$nove_path
	ACEPDIR=$acep_path
	PROCDIR=$proc_path
	REPODIR=$repo_path
	LOGDIR=$log_path
	RECHDIR=$rech_path

	create_dirs
	copy_binaries
	copy_tables

	#Esto tambien hay que loguearlo:
	echo Directorio de configuración: "$conf_path"
	echo $(ls "$conf_path")
	echo Directorio de ejecutables: "$bin_path"
	echo $(ls "$bin_path")
	echo Directorio de maestros y tablas: "$mae_path"
	echo $(ls "$mae_path")
	echo Directorio de recepción de archivos de llamadas: "$nove_path"
	echo Directorio de archivos de llamadas aceptadas: "$acep_path"
	echo Directorio de archivos de llamadas sospechosas: "$proc_path"
	echo Directorio de archivos de reportes de llamadas: "$repo_path"
	echo Directorio de archivos de log: "$log_path"
	echo Directorio de archivos rechazados: "$rech_path"
	echo Estado de la instalación: COMPLETA
	echo Proceso de Instalación Finalizado
	exit
}

#Completar instalacion si es necesario
complete_install
#Chequeo de Perl
check_perl
#Términos y condiciones
terms_and_conditions
#Ingreso de valores de variables de configuración
choose_vars_values
continue_install
#Confirmar instalación
confirm_install
#Instalación propiamente dicha
do_install
