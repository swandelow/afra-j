#!/bin/bash

MSG_INVALID_DIR_NAME="El nombre del directorio sólo puede contener letras y debe tener de 1 a 15 caracteres. Intente nuevamente:"
MSG_INVALID_INTEGER="Tiene que ingresar un número entero. Intente nuevamente:"
DIR_NAME_REGEX=^[a-zA-Z]{1,15}\(/[a-zA-Z]{1,15}\){0,}$
INTEGER_REGEX=^[0-9]+$
GRUPO=grupo06
CONFDIR="$GRUPO"/conf
BINDIR="$GRUPO"/bin
MAEDIR="$GRUPO"/mae
NOVEDIR="$GRUPO"/novedades
ACEPDIR="$GRUPO"/aceptadas
PROCDIR="$GRUPO"/sospechosas
REPODIR="$GRUPO"/reportes
LOGDIR="$GRUPO"/log
RECHDIR="$GRUPO"/rechazadas
DATASIZE=100
LOGEXT=lg
LOGSIZE=400

LOG_INFO_TYPE=INFO
LOG_ERROR_TYPE=ERROR

function log {
	message=$1
	type=$2
	./comandos/GraLog "AFINSTAL" "$message" "$type"
}

function log2 {
	message=$1
	type=$2
	if [ -n "$3" ]; then
		echo "$message"
	fi
	./comandos/GraLog "AFINSTAL" "$message" "$type"
}

#Chequea que Perl esté instalado
function check_perl {
	perl_version=$(dpkg-query -W perl | sed 's-\(perl\)\([[:blank:]]\)\(.*\)-\3-g')
	if [ ! -z $perl_version ]; then
		#GRABAR EN EL LOG
		log2 "Perl version: $perl_version" "$LOG_INFO_TYPE" "s"
	else
		#Perl no instalado
		log2 "Para ejecutar el sistema AFRA-J es necesario contar con Perl 5 o superior." "$LOG_INFO_TYPE" "s"
		log2 "Efectúe su instalación e inténtelo nuevamente." "$LOG_INFO_TYPE" "s"
		log2 "Proceso de Instalación Cancelado" "$LOG_INFO_TYPE" "s"
		exit
	fi
}

#Pide al usuario que acepte los términos y condiciones
function terms_and_conditions {
	echo
	log2 "***************************************************" "$LOG_INFO_TYPE" "s"
	log2 "*  Proceso de Instalación de \"AFRA-J\"  *" "$LOG_INFO_TYPE" "s"
	log2 "*  Tema J Copyright © Grupo 06 - Segundo Cuatrimestre 2015  *" "$LOG_INFO_TYPE" "s"
	log2 "***************************************************" "$LOG_INFO_TYPE" "s"
	log2 'A T E N C I O N: Al instalar UD. expresa aceptar los términos y condiciones del "ACUERDO DE LICENCIA DE SOFTWARE" incluido en este paquete.' "$LOG_INFO_TYPE" "s"
	log2 "Acepta? Si – No" "$LOG_INFO_TYPE" "s"
	read terms_choice

	while [ "$terms_choice" != Si ] && [ "$terms_choice" != No ];
	do
		echo Debe ingresar Si o No:
		read terms_choice
	done
	log "$terms_choice" "$LOG_INFO_TYPE"
	if [ "$terms_choice" == No ]; then
		log2 "Instalación cancelada." "$LOG_INFO_TYPE" "s"
		exit
	fi
}


function choose_dir {
	# $1 Variable de directorio a settear.
	# $2 Mensaje pidiendo ingreso del path.
	# $3 Mensaje a mostrar una vez ingresado correctamente el path.
	
	log2 "$2" "$LOG_INFO_TYPE" "s"

	read input_dir
	if [ ! -z "$input_dir" ]; then
		while ! [[ $input_dir =~ $DIR_NAME_REGEX ]];
		do
			echo "$MSG_INVALID_DIR_NAME"
			read input_dir
			if [ -z "$input_dir" ]; then
				log2 "$3 ${!1}" "$LOG_INFO_TYPE" "s"
				echo
				return
			fi
		done
		eval $1="$GRUPO"/"$input_dir"
	fi
	
	log2 "$3 ${!1}" "$LOG_INFO_TYPE" "s"
	echo
}

#Ingreso de espacio mínimo libre para la recepción de archivos de llamadas
function choose_nove_dir_space {
	espacio_disponible=$(df -h -B M --output='avail' grupo06 | tail -1 | sed 's-\([0-9]*\)\(M\)-\1-g')

	log2 "Defina espacio mínimo libre para la recepción de archivos de llamadas en Mbytes ($DATASIZE):" "$LOG_INFO_TYPE" "s"
	read data_size
	if [ ! -z "$data_size" ]; then
		while [[ ! $data_size =~ $INTEGER_REGEX ]];
		do
			echo "$MSG_INVALID_INTEGER"
			read data_size
			if [ -z "$data_size" ]; then
				log2 "El espacio mínimo libre para la recepción de archivos será $DATASIZE Mb" "$LOG_INFO_TYPE" "s"
				echo
				return
			fi
		done
	else
		log2 "El espacio mínimo libre para la recepción de archivos será $DATASIZE Mb" "$LOG_INFO_TYPE" "s"
		echo
		return
	fi

	while (( espacio_disponible < data_size ));
	do
		log2 "Insuficiente espacio en disco." "$LOG_INFO_TYPE" "s"
		log2 "Espacio disponible: $espacio_disponible Mb." "$LOG_INFO_TYPE" "s"
		log2 "Espacio requerido $data_size Mb." "$LOG_INFO_TYPE" "s"
		log2 "Inténtelo nuevamente:" "$LOG_INFO_TYPE" "s"

		read data_size
		if [ ! -z "$data_size" ]; then
			while [[ ! $data_size =~ $INTEGER_REGEX ]];
			do
				echo "$MSG_INVALID_INTEGER"
				read data_size
				if [ -z "$data_size" ]; then
					log2 "El espacio mínimo libre para la recepción de archivos será $DATASIZE Mb" "$LOG_INFO_TYPE" "s"
					echo
					return
				fi
			done
		else
			log2 "El espacio mínimo libre para la recepción de archivos será $DATASIZE Mb" "$LOG_INFO_TYPE" "s"
			echo
			return
		fi
	done

	DATASIZE="$data_size"
	log2 "El espacio mínimo libre para la recepción de archivos será $DATASIZE Mb" "$LOG_INFO_TYPE" "s"
	echo
}

#Ingreso de nombre de extensión de archivos de log
function choose_log_extension_name {
	log2 "Defina el nombre para la extensión de los archivos de log ($LOGEXT):" "$LOG_INFO_TYPE" "s"
	read log_ext
	if [ -z "$log_ext" ]; then
		log2 "El nombre para la extensión de los archivos de log será $LOGEXT" "$LOG_INFO_TYPE" "s"
		echo
		return
	fi

	while ! [[ $log_ext =~ ^[a-zA-Z]{2,5}$ ]];
	do
		echo La extensión debe estar compuesta solamente por letras y debe tener de 2 a 5 caracteres.
		echo Defina el nombre para la extensión de los archivos de log \("$LOGEXT"\):
		read log_ext
		if [ -z "$log_ext" ]; then
			log2 "El nombre para la extensión de los archivos de log será $LOGEXT" "$LOG_INFO_TYPE" "s"
			echo
			return
		fi
	done

	LOGEXT="$log_ext"
	log2 "El nombre para la extensión de los archivos de log será $LOGEXT" "$LOG_INFO_TYPE" "s"
	echo
}

#Ingreso de tamaño máximo para archivos de log
function choose_log_file_max_size {
	log2 "Defina el tamaño máximo para cada archivo de log en Kbytes ($LOGSIZE):" "$LOG_INFO_TYPE" "s"
	read log_size
	if [ -z "$log_size" ]; then
		log2 "El tamaño máximo para cada archivo de log será $LOGSIZE Kb" "$LOG_INFO_TYPE" "s"
		echo
		return
	fi

	while [[ ! $log_size =~ $INTEGER_REGEX ]];
	do
		echo "$MSG_INVALID_INTEGER"
		read log_size
		if [ -z "$log_size" ]; then
			log2 "El tamaño máximo para cada archivo de log será $LOGSIZE Kb" "$LOG_INFO_TYPE" "s"
			echo
		return
	fi
	done

	LOGSIZE="$log_size"
	log2 "El tamaño máximo para cada archivo de log será $LOGSIZE Kb" "$LOG_INFO_TYPE" "s"
	echo
}

function choose_vars_values {
	#choose_bin_dir
	choose_dir BINDIR "Defina el directorio de instalación de los ejecutables ($BINDIR):" "El directorio de ejecutables será"
	#choose_mae_dir
	choose_dir MAEDIR "Defina el directorio para maestros y tablas ($MAEDIR):" "El directorio para maestros y tablas será"
	#choose_nove_dir
	choose_dir NOVEDIR "Defina el directorio de recepción de archivos de llamadas ($NOVEDIR):" "El directorio de recepción de archivos de llamadas será"
	choose_nove_dir_space
	#choose_acep_dir
	choose_dir ACEPDIR "Defina el directorio de grabación de los archivos de llamadas aceptadas ($ACEPDIR):" "El directorio de grabación de los archivos de llamadas aceptadas será"
	#choose_proc_dir
	choose_dir PROCDIR "Defina el directorio de grabación de los registros de llamadas sospechosas ($PROCDIR):" "El directorio de grabación de los registros de llamadas sospechosas será"
	#choose_repo_dir
	choose_dir REPODIR "Defina el directorio de grabación de los reportes ($REPODIR):" "El directorio de grabación de los reportes será"
	#choose_log_dir
	choose_dir LOGDIR "Defina el directorio para los archivos de log ($LOGDIR):" "El directorio para los archivos de log será"
	choose_log_extension_name
	choose_log_file_max_size
	#choose_rech_dir
	choose_dir RECHDIR "Defina el directorio de grabación de archivos rechazados ($RECHDIR):" "El directorio de grabación de archivos rechazados será"
}

#Muestra el nombre de las variables de configuración
function show_vars_values {
	log2 "Directorio de Ejecutables: "$BINDIR"" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de Maestros y Tablas: "$MAEDIR"" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de recepción de archivos y llamadas: "$NOVEDIR"" "$LOG_INFO_TYPE" "s"
	log2 "Espacio mínimo libre para arribos: "$DATASIZE" Mb" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de Archivos de llamadas Aceptados: "$ACEPDIR"" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de Archivos de llamadas Sospechosas: "$PROCDIR"" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de Archivos de Reportes de llamadas: "$REPODIR"" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de Archivos de Log: "$LOGDIR"" "$LOG_INFO_TYPE" "s"
	log2 "Extensión para los archivos de log: "$LOGEXT"" "$LOG_INFO_TYPE" "s"
	log2 "Tamaño máximo para los archivos de log: "$LOGSIZE" Kb" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de Archivos Rechazados: "$RECHDIR"" "$LOG_INFO_TYPE" "s"
}

function continue_install {
	show_vars_values
	log2 "Estado de la instalación: LISTA" "$LOG_INFO_TYPE" "s"
	#Continuar instalación?
	log2 "Desea continuar con la instalación? (Si – No)" "$LOG_INFO_TYPE" "s"
	read continue_choice
	while [ "$continue_choice" != Si ] && [ "$continue_choice" != No ];
	do
		echo Debe ingresar Si o No:
		read continue_choice
	done
	log "$continue_choice" "$LOG_INFO_TYPE"
	if [ "$continue_choice" == Si ]; then
		return
	fi

	while [ "$continue_choice" == No ]; 
	do
		choose_vars_values
		show_vars_values
		log2 "Estado de la instalación: LISTA" "$LOG_INFO_TYPE" "s"
		#Continuar instalación?
		log2 "Desea continuar con la instalación? (Si – No)" "$LOG_INFO_TYPE" "s"
		read continue_choice
		while [ "$continue_choice" != Si ] && [ "$continue_choice" != No ];
		do
			echo Debe ingresar Si o No:
			read continue_choice
		done
		log "$continue_choice" "$LOG_INFO_TYPE"
		if [ "$continue_choice" == Si ]; then
			return
		fi
	done	
}

function confirm_install {
	log2 "Iniciando Instalación. Esta Ud. seguro? (Si - No)" "$LOG_INFO_TYPE" "s"
	read install_choice
	while [ "$install_choice" != Si ] && [ "$install_choice" != No ];
	do
		echo Debe ingresar Si o No:
		read install_choice
	done
	log2 "$install_choice" "$LOG_INFO_TYPE"
	if [ "$continue_choice" == No ]; then
		log2 "Instalación cancelada." "$LOG_INFO_TYPE" "s"
		exit
	fi	
}

function create_dirs {
	mkdir -p "$BINDIR"
	mkdir -p "$MAEDIR"
	mkdir -p "$NOVEDIR"
	mkdir -p "$ACEPDIR"
	mkdir -p "$PROCDIR"
	mkdir -p "$PROCDIR"/proc
	mkdir -p "$REPODIR"
	mkdir -p "$LOGDIR"
	mkdir -p "$RECHDIR"
	mkdir -p "$RECHDIR"/llamadas
	echo
}

function copy_binaries {
	cp comandos/AFINI "$BINDIR"/AFINI
	cp comandos/AFREC "$BINDIR"/AFREC
	cp comandos/AFUMB "$BINDIR"/AFUMB
	cp comandos/GraLog "$BINDIR"/GraLog
	cp comandos/Arrancar "$BINDIR"/Arrancar
	cp comandos/Detener "$BINDIR"/Detener
	cp comandos/MoverA "$BINDIR"/MoverA	
	cp comandos/AFLIST.pl "$BINDIR"/AFLIST.pl
	cp comandos/validadorArchivos.sh "$BINDIR"/validadorArchivos.sh
	cp comandos/util.sh "$BINDIR"/util.sh

	chmod -R +r+w+x "$BINDIR"
}

function copy_tables {
	cp ../archivos/CdP.csv "$MAEDIR"/CdP.mae	
	cp ../archivos/CdA.csv "$MAEDIR"/CdA.mae	
	cp ../archivos/centrales.csv "$MAEDIR"/CdC.mae	
	cp ../archivos/agentes.csv "$MAEDIR"/agentes.mae
	cp ../archivos/umbrales.csv "$MAEDIR"/umbral.tab
	touch "$MAEDIR"/tllama.tab
	> "$MAEDIR"/tllama.tab
	#Doy permisos a todos a todo el directorio
	chmod -R +r+w "$MAEDIR"
	echo DISCADO DIRECTO INTERNACIONAL\;DDI >> "$MAEDIR"/tllama.tab
	echo DISCADO DIRECTO NACIONAL\;DDN >> "$MAEDIR"/tllama.tab
	echo LOCAL\;LOC >> "$MAEDIR"/tllama.tab
}

function update_config_file {
	log2 "Actualizando la configuración del sistema" "$LOG_INFO_TYPE" "s"
	touch "$CONFDIR"/AFINSTAL.cnfg
	#De esta manera borro lo que haya:
	> "$CONFDIR"/AFINSTAL.cnfg
	#Doy permisos a todos a todo el directorio de configuración
	chmod -R +r+w "$CONFDIR"
	#Copio los registros al archivo de configuración
	echo GRUPO=$(pwd)/"$GRUPO"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo CONFDIR=$(pwd)/"$CONFDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo BINDIR=$(pwd)/"$BINDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo MAEDIR=$(pwd)/"$MAEDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo NOVEDIR=$(pwd)/"$NOVEDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo ACEPDIR=$(pwd)/"$ACEPDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo PROCDIR=$(pwd)/"$PROCDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo REPODIR=$(pwd)/"$REPODIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo LOGDIR=$(pwd)/"$LOGDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo RECHDIR=$(pwd)/"$RECHDIR"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo DATASIZE="$DATASIZE"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo LOGEXT="$LOGEXT"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
	echo LOGSIZE="$LOGSIZE"="$USER"=$(date) >> "$CONFDIR"/AFINSTAL.cnfg
}

function do_install {
	echo Creando Estructuras de directorio. . . .
	log2 "Actualizando la configuración del sistema" "$LOG_INFO_TYPE"
	log2 "$BINDIR" "$LOG_INFO_TYPE" "s"
	log2 "$MAEDIR" "$LOG_INFO_TYPE" "s"
	log2 "$NOVEDIR" "$LOG_INFO_TYPE" "s"
	log2 "$ACEPDIR" "$LOG_INFO_TYPE" "s"
	log2 "$PROCDIR" "$LOG_INFO_TYPE" "s"
	log2 "$REPODIR" "$LOG_INFO_TYPE" "s"
	log2 "$LOGDIR" "$LOG_INFO_TYPE" "s"
	log2 "$RECHDIR" "$LOG_INFO_TYPE" "s"
	create_dirs
	log2 "Instalando Programas y Funciones" "$LOG_INFO_TYPE" "s"
	copy_binaries
	log2 "Instalando Archivos Maestros y Tablas" "$LOG_INFO_TYPE" "s"
	copy_tables
	update_config_file
	log2 "Instalación CONCLUIDA." "$LOG_INFO_TYPE" "s"
}

#Se encarga de completar la instalacion de ser necesario
function complete_install {
	if [ ! -f "$CONFDIR"/AFINSTAL.cnfg ]; then
    	#AFRAJ NO esta instalado
    	return
	fi

	declare -a missing_dirs
	declare -a missing_files
	mae_filenames=(CdP.mae CdA.mae CdC.mae agentes.mae umbral.tab tllama.tab)
	bin_filenames=(AFINI AFREC AFUMB GraLog Arrancar Detener MoverA AFLIST.pl validadorArchivos.sh util.sh)
	
	index_dirs=0
	index_files=0

	#CONFDIR
	conf_path=$(grep CONFDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$conf_path" ]; then
		missing_dirs[index_dirs]="$conf_path"
		((index_dirs++))
	fi

	#MAEDIR
	mae_path=$(grep MAEDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$mae_path" ]; then
		missing_dirs[index_dirs]="$mae_path"
		((index_dirs++))
	fi
	for mae_file in "${mae_filenames[@]}"
	do
		if [ ! -f "$mae_path"/"$mae_file" ]; then
			missing_files[index_files]="$mae_path"/"$mae_file"
			((index_files++))
		fi
	done

	#BINDIR
	bin_path=$(grep BINDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$bin_path" ]; then
		missing_dirs[index_dirs]="$bin_path"
		((index_dirs++))
	fi
	for bin_file in "${bin_filenames[@]}"
	do
		if [ ! -f "$bin_path"/"$bin_file" ]; then
			missing_files[index_files]="$bin_path"/"$bin_file"
			((index_files++))
		fi
	done

	#NOVEDIR
	nove_path=$(grep NOVEDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$nove_path" ]; then
		missing_dirs[index_dirs]="$nove_path"
		((index_dirs++))
	fi

	#ACEPDIR
	acep_path=$(grep ACEPDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$acep_path" ]; then
		missing_dirs[index_dirs]="$acep_path"
		((index_dirs++))
	fi

	#PROCDIR
	proc_path=$(grep PROCDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$proc_path" ]; then
		missing_dirs[index_dirs]="$proc_path"
		((index_dirs++))
	fi

	#REPODIR
	repo_path=$(grep REPODIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$repo_path" ]; then
		missing_dirs[index_dirs]="$repo_path"
		((index_dirs++))
	fi

	#LOGDIR
	log_path=$(grep LOGDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$log_path" ]; then
		missing_dirs[index_dirs]="$log_path"
		((index_dirs++))
	fi

	#RECHDIR
	rech_path=$(grep RECHDIR "$CONFDIR"/AFINSTAL.cnfg | sed 's-^\([^=]*\)=\([^=]*\)=\(.*\)$-\2-g')
	if [ ! -d "$rech_path" ]; then
		missing_dirs[index_dirs]="$rech_path"
		((index_dirs++))
	fi

	#Esto tambien hay que loguearlo:
	log2 "Directorio de configuración: $conf_path" "$LOG_INFO_TYPE" "s"
	log2 "$(ls -m "$conf_path")" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de ejecutables: $bin_path" "$LOG_INFO_TYPE" "s"
	log2 "$(ls -m "$bin_path")" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de maestros y tablas: $mae_path" "$LOG_INFO_TYPE" "s"
	log2 "$(ls -m "$mae_path")" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de recepción de archivos de llamadas: $nove_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos de llamadas aceptadas: $acep_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos de llamadas sospechosas: $proc_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos de reportes de llamadas: $repo_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos de log: $log_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos rechazados: $rech_path" "$LOG_INFO_TYPE" "s"

	if [ ${#missing_dirs[@]} == 0 ] && [ ${#missing_files[@]} == 0 ]; then
		log2 "Estado de la instalación: COMPLETA" "$LOG_INFO_TYPE" "s"
		log2 "Proceso de Instalación Finalizado" "$LOG_INFO_TYPE" "s"
		exit
	fi

	log2 "Directorios faltantes:" "$LOG_INFO_TYPE" "s"
	log2 "${missing_dirs[*]}" "$LOG_INFO_TYPE" "s"
	log2 "Archivos faltantes:" "$LOG_INFO_TYPE" "s"
	log2 "${missing_files[*]}" "$LOG_INFO_TYPE" "s"

	log2 "Desea completar la instalación? (Si – No)" "$LOG_INFO_TYPE" "s"
	read complete_choice
	while [ "$complete_choice" != Si ] && [ "$complete_choice" != No ];
	do
		echo Debe ingresar Si o No:
		read complete_choice
	done
	if [ "$complete_choice" == No ]; then
		log2 "Instalación cancelada." "$LOG_INFO_TYPE" "s"
		exit
	fi

	#Instalo de nuevo
	BINDIR=$bin_path
	MAEDIR=$mae_path
	NOVEDIR=$nove_path
	ACEPDIR=$acep_path
	PROCDIR=$proc_path
	REPODIR=$repo_path
	LOGDIR=$log_path
	RECHDIR=$rech_path

	create_dirs
	copy_binaries
	copy_tables

	#Esto tambien hay que loguearlo:
	log2 "Directorio de configuración: $conf_path" "$LOG_INFO_TYPE" "s"
	log2 "$(ls -m "$conf_path")" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de ejecutables: $bin_path" "$LOG_INFO_TYPE" "s"
	log2 "$(ls -m "$bin_path")" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de maestros y tablas: $mae_path" "$LOG_INFO_TYPE" "s"
	log2 "$(ls -m "$mae_path")" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de recepción de archivos de llamadas: $nove_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos de llamadas aceptadas: $acep_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos de llamadas sospechosas: $proc_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos de reportes de llamadas: $repo_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos de log: $log_path" "$LOG_INFO_TYPE" "s"
	log2 "Directorio de archivos rechazados: $rech_path" "$LOG_INFO_TYPE" "s"
	log2 "Estado de la instalación: COMPLETA" "$LOG_INFO_TYPE" "s"
	log2 "Proceso de Instalación Finalizado" "$LOG_INFO_TYPE" "s"
	exit
}

#Completar instalacion si es necesario
complete_install
#Chequeo de Perl
check_perl
#Términos y condiciones
terms_and_conditions
#Ingreso de valores de variables de configuración
choose_vars_values
continue_install
#Confirmar instalación
confirm_install
#Instalación propiamente dicha
do_install